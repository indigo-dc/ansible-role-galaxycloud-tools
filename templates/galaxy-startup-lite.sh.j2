#!/bin/bash

# ELIXIR-IIB - The Italian Infrastructure for Bioinformatics
# IBIOM-CNR
#
# Contributors:
# author: Tangaro Marco
# email: ma.tangaro@ibiom.cnr.it
#
# Usage: galaxy-startup-lite [start,stop]

GALAXY='/home/galaxy/galaxy'
GALAXY_USER='galaxy'

# allow galaxy configured to start using a proxy, to start with run.sh
# if the static_enabled option is configure in galaxy.ini you have to comment it or set to
# static_enabled = True
# allow_library_path_paste = True
export GALAXY_CONFIG_STATIC_ENABLED=True
export GALAXY_CONFIG_ALLOW_LIBRARY_PATH_PASTE=True
unset GALAXY_CONFIG_NGINX_UPLOAD_STORE
unset GALAXY_CONFIG_NGINX_UPLOAD_PATH

# The lite mode can be useful to populate data libraries.
# To make this work it is needed to unset the following variables
unset GALAXY_CONFIG_JOB_WORKING_DIRECTORY
unset GALAXY_CONFIG_FILE_PATH
unset GALAXY_CONFIG_NEW_FILE_PATH
unset GALAXY_CONFIG_TEMPLATE_CACHE_PATH
unset GALAXY_CONFIG_CITATION_CACHE_DATA_DIR
unset GALAXY_CONFIG_CLUSTER_FILES_DIRECTORY
unset GALAXY_CONFIG_FTP_UPLOAD_DIR
unset GALAXY_CONFIG_INTEGRATED_TOOL_PANEL_CONFIG

JOB_CONF={{galaxy_config_path}}/config/job_conf.xml.sample_basic
export GALAXY_CONFIG_JOB_CONFIG_FILE=$JOB_CONF

#---
install_log="$GALAXY/galaxy_startup_lite.log"
install_pidfile="$GALAXY/galaxy_startup_lite.pid"

#________________________________
function check_postgresql_vm {

  # Check if postgresql is running
  if [[ -r /etc/os-release ]]; then
    . /etc/os-release
    echo $ID
    if [ "$ID" = "ubuntu" ]; then
      echo "[Ubuntu] Check postgresql."
      if [ "$VERSION_ID" = "16.04"]; then
        service start postgresql
      else
        systemctl start postgresql
      fi
    elif [ "$ID" = "centos" ]; then
      echo "[EL] Check postgresql"
      systemctl start postgresql-9.6
    fi
  fi
}

function check_postgresql_docker {
  supervisorctl start postgresql
}

function check_postgresql {

  check_postgresql_vm # selection between vm and docker will be done at ansible level.

  # wait for database to finish starting up
  STATUS=$(psql 2>&1)
  while [[ ${STATUS} =~ "starting up" ]]
  do
    echo "waiting for database: $STATUS"
    STATUS=$(psql 2>&1)
    sleep 1
  done
}

#________________________________
# Install lsof

function install_lsof {
  if [[ -r /etc/os-release ]]; then
    . /etc/os-release
    echo $ID
    if [ "$ID" = "ubuntu" ]; then
      echo "[Ubuntu] Installing lsof with apt."
      apt-get install -y lsof
    elif [ "$ID" = "centos" ]; then
      echo "[EL] Installing lsof with yum."
      yum install -y lsof
    fi
  else
    echo "Not running a distribution with /etc/os-release available."
  fi
}

function check_lsof {
  type -P lsof &>/dev/null || { echo "lsof is not installed. Installing.."; install_lsof; }
}

#________________________________
function galaxy_start {

  # clean logs
  echo "Clean logs"
  rm $install_log
  rm $install_pidfile

  # ensure Galaxy is not running through supervisord
  if pgrep "supervisord" > /dev/null
  then
    echo "Galaxy managed using supervisord. Shutting it down."
    supervisorctl stop galaxy:
  fi

  # ensure galaxy is not running on run.sh and 8080 port
  check_lsof
  echo "Kill run.sh Galaxy instance listening on 8080 port"
  kill -9 $(lsof -t -i :8080)
  # install lsof to be sure

  # check PostgreSQL
  check_postgresql

  # create log file
  sudo -E -u $GALAXY_USER touch $install_log

  # start Galaxy
  export PORT=8080
  echo "starting Galaxy"
  sudo -E -u $GALAXY_USER $GALAXY/run.sh --daemon --skip-eggs --skip-wheels --log-file=$install_log --pid-file=$install_pidfile

  # wait galaxy to start
  galaxy_install_pid=`cat $install_pidfile`
  echo $galaxy_install_pid

  while : ; do
    tail -n 2 $install_log | grep -E -q "Removing PID file galaxy_install.pid|Daemon is already running"
    if [ $? -eq 0 ] ; then
      echo "Galaxy could not be started."
      echo "More information about this failure may be found in the following log snippet from galaxy_install.log:"
      echo "========================================"
      tail -n 60 $install_log
      echo "========================================"
      echo $1
      exit 1
    fi
    tail -n 2 $install_log | grep -q "Starting server in PID $galaxy_install_pid"
    if [ $? -eq 0 ] ; then
      echo "Galaxy is running."
      break
    fi
  done

}

function galaxy_stop {
  echo "stopping Galaxy"
  sudo -E -u $GALAXY_USER $GALAXY/run.sh --stop-daemon --skip-eggs --skip-wheels --log-file=$install_log --pid-file=$install_pidfile

  echo "uset all variables"
  unset GALAXY_CONFIG_STATIC_ENABLED
  unset GALAXY_CONFIG_ALLOW_LIBRARY_PATH_PASTE
  unset GALAXY_CONFIG_NGINX_UPLOAD_STORE
  unset GALAXY_CONFIG_NGINX_UPLOAD_PATH
  unset GALAXY_CONFIG_JOB_WORKING_DIRECTORY
  unset GALAXY_CONFIG_FILE_PATH
  unset GALAXY_CONFIG_NEW_FILE_PATH
  unset GALAXY_CONFIG_TEMPLATE_CACHE_PATH
  unset GALAXY_CONFIG_CITATION_CACHE_DATA_DIR
  unset GALAXY_CONFIG_CLUSTER_FILES_DIRECTORY
  unset GALAXY_CONFIG_FTP_UPLOAD_DIR
  unset GALAXY_CONFIG_INTEGRATED_TOOL_PANEL_CONFIG
  unset GALAXY_CONFIG_JOB_CONFIG_FILE
}

#________________________________
# main

if [ "$1" == "start" ]; then
  galaxy_start
elif [ "$1" == "stop" ]; then
  galaxy_stop
else
  echo "Usage: galaxy-startup-lite [start, stop]"
fi
